// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: proto/rendezvous.proto

package grpc_rendezvous

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Rendezvous_Stream_FullMethodName = "/rendezvous.Rendezvous/Stream"
)

// RendezvousClient is the client API for Rendezvous service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RendezvousClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (Rendezvous_StreamClient, error)
}

type rendezvousClient struct {
	cc grpc.ClientConnInterface
}

func NewRendezvousClient(cc grpc.ClientConnInterface) RendezvousClient {
	return &rendezvousClient{cc}
}

func (c *rendezvousClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Rendezvous_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rendezvous_ServiceDesc.Streams[0], Rendezvous_Stream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rendezvousStreamClient{stream}
	return x, nil
}

type Rendezvous_StreamClient interface {
	Send(*Frame) error
	Recv() (*Frame, error)
	grpc.ClientStream
}

type rendezvousStreamClient struct {
	grpc.ClientStream
}

func (x *rendezvousStreamClient) Send(m *Frame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rendezvousStreamClient) Recv() (*Frame, error) {
	m := new(Frame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RendezvousServer is the server API for Rendezvous service.
// All implementations must embed UnimplementedRendezvousServer
// for forward compatibility
type RendezvousServer interface {
	Stream(Rendezvous_StreamServer) error
	mustEmbedUnimplementedRendezvousServer()
}

// UnimplementedRendezvousServer must be embedded to have forward compatible implementations.
type UnimplementedRendezvousServer struct {
}

func (UnimplementedRendezvousServer) Stream(Rendezvous_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedRendezvousServer) mustEmbedUnimplementedRendezvousServer() {}

// UnsafeRendezvousServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RendezvousServer will
// result in compilation errors.
type UnsafeRendezvousServer interface {
	mustEmbedUnimplementedRendezvousServer()
}

func RegisterRendezvousServer(s grpc.ServiceRegistrar, srv RendezvousServer) {
	s.RegisterService(&Rendezvous_ServiceDesc, srv)
}

func _Rendezvous_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RendezvousServer).Stream(&rendezvousStreamServer{stream})
}

type Rendezvous_StreamServer interface {
	Send(*Frame) error
	Recv() (*Frame, error)
	grpc.ServerStream
}

type rendezvousStreamServer struct {
	grpc.ServerStream
}

func (x *rendezvousStreamServer) Send(m *Frame) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rendezvousStreamServer) Recv() (*Frame, error) {
	m := new(Frame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Rendezvous_ServiceDesc is the grpc.ServiceDesc for Rendezvous service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rendezvous_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rendezvous.Rendezvous",
	HandlerType: (*RendezvousServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Rendezvous_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/rendezvous.proto",
}
